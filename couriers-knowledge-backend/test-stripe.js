// test-integration-complete.js - Teste COMPLETO da integra√ß√£o

require('dotenv').config();
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);

async function testeCompletoIntegracao() {
  console.log('üöÄ TESTE COMPLETO DA INTEGRA√á√ÉO STRIPE + BACKEND\n');

  try {
    // 1. Validar todas as vari√°veis
    console.log('1Ô∏è‚É£ Validando configura√ß√£o...');
    const requiredVars = [
      'STRIPE_PUBLISHABLE_KEY',
      'STRIPE_SECRET_KEY', 
      'STRIPE_WEBHOOK_SECRET',
      'STRIPE_PRICE_MONTHLY',
      'STRIPE_PRICE_SEMIANNUAL',
      'STRIPE_PRICE_ANNUAL',
      'FRONTEND_URL'
    ];

    for (const varName of requiredVars) {
      if (!process.env[varName]) {
        throw new Error(`‚ùå Vari√°vel ${varName} n√£o configurada`);
      }
    }
    console.log('‚úÖ Todas as vari√°veis configuradas');

    // 2. Testar conex√£o Stripe
    console.log('\n2Ô∏è‚É£ Testando conex√£o Stripe...');
    const account = await stripe.accounts.retrieve();
    console.log('‚úÖ Conectado ao Stripe Account:', account.id);

    // 3. Validar todos os Price IDs
    console.log('\n3Ô∏è‚É£ Validando Price IDs...');
    const prices = {
      'Mensal': { id: process.env.STRIPE_PRICE_MONTHLY, expected: 24.90 },
      'Semestral': { id: process.env.STRIPE_PRICE_SEMIANNUAL, expected: 119.40 },
      'Anual': { id: process.env.STRIPE_PRICE_ANNUAL, expected: 178.80 }
    };

    for (const [nome, config] of Object.entries(prices)) {
      const price = await stripe.prices.retrieve(config.id);
      const valor = price.unit_amount / 100;
      const status = valor === config.expected ? '‚úÖ' : '‚ùå';
      console.log(`${status} ${nome}: R$ ${valor} (esperado: R$ ${config.expected})`);
      
      if (valor !== config.expected) {
        console.log(`‚ö†Ô∏è  Price ID ${config.id} tem valor incorreto!`);
      }
    }

    // 4. Testar cria√ß√£o de customer completo
    console.log('\n4Ô∏è‚É£ Testando customer completo...');
    const customer = await stripe.customers.create({
      email: 'teste@couriers-knowledge.com',
      name: 'Usu√°rio de Teste Premium',
      metadata: {
        user_id: '999',
        steam_id: '76561198000000000',
        environment: 'test',
        created_at: new Date().toISOString()
      }
    });
    console.log('‚úÖ Customer criado com metadata:', customer.id);

    // 5. Testar checkout session para cada plano
    console.log('\n5Ô∏è‚É£ Testando checkout sessions...');
    const sessions = [];
    
    for (const [nome, config] of Object.entries(prices)) {
      const session = await stripe.checkout.sessions.create({
        customer: customer.id,
        payment_method_types: ['card', 'boleto'],
        line_items: [{
          price: config.id,
          quantity: 1,
        }],
        mode: 'subscription',
        success_url: `${process.env.FRONTEND_URL}/success`,
        cancel_url: `${process.env.FRONTEND_URL}/cancel`,
        metadata: {
          user_id: '999',
          price_id: config.id,
          test: 'true'
        }
      });
      sessions.push({ nome, session });
      console.log(`‚úÖ ${nome}: Session ${session.id}`);
    }

    // 6. Testar webhook signature (simula√ß√£o)
    console.log('\n6Ô∏è‚É£ Testando webhook configuration...');
    if (process.env.STRIPE_WEBHOOK_SECRET && process.env.STRIPE_WEBHOOK_SECRET.startsWith('whsec_')) {
      console.log('‚úÖ Webhook secret configurado corretamente');
    } else {
      console.log('‚ùå Webhook secret n√£o configurado ou formato incorreto');
    }

    // 7. Testar endpoints da API (simula√ß√£o)
    console.log('\n7Ô∏è‚É£ Configura√ß√£o dos endpoints...');
    console.log('üìã Endpoints que devem funcionar:');
    console.log('   GET /api/stripe/plans');
    console.log('   POST /api/stripe/create-checkout-session');
    console.log('   GET /api/stripe/session/:sessionId');
    console.log('   GET /api/stripe/subscription-status');
    console.log('   POST /api/stripe/webhook');

    // 8. Limpeza
    console.log('\n8Ô∏è‚É£ Limpando dados de teste...');
    await stripe.customers.del(customer.id);
    console.log('‚úÖ Customer removido');

    // 9. Resumo final
    console.log('\nüéâ INTEGRA√á√ÉO COMPLETA TESTADA COM SUCESSO!');
    console.log('\nüìã CHECKLIST FINAL:');
    console.log('‚úÖ Stripe conectado e funcionando');
    console.log('‚úÖ Price IDs validados');
    console.log('‚úÖ Customer creation OK');
    console.log('‚úÖ Checkout sessions OK');
    console.log('‚úÖ Webhook configurado');
    console.log('‚úÖ Endpoints preparados');

    console.log('\nüöÄ PR√ìXIMOS PASSOS:');
    console.log('1. Inicie o servidor: npm start');
    console.log('2. Teste os endpoints via Postman/Insomnia');
    console.log('3. Configure o webhook URL no Dashboard Stripe');
    console.log('4. Implemente o frontend com checkout');
    console.log('5. Teste com cart√£o: 4242 4242 4242 4242');

    console.log('\nüí° ENDPOINTS PARA TESTAR:');
    console.log(`GET ${process.env.BACKEND_URL}/api/stripe/plans`);
    console.log(`Webhook URL: ${process.env.BACKEND_URL}/api/stripe/webhook`);

  } catch (error) {
    console.error('‚ùå ERRO NO TESTE COMPLETO:', error.message);
    console.error('üîç Detalhes:', error.type || 'N/A', '|', error.code || 'N/A');
    process.exit(1);
  }
}

testeCompletoIntegracao();